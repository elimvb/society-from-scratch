import random
from utils.text_generation import generate, get_rating
import networkx as nx

class Agent:
     
    """
    A class to represent an individual agent in a simulation similar to The Sims.

    Attributes:
    -----------
    name : str
        The name of the agent.
    profession : str
        The profession of the agent.
    personality : str
        The personality of the agent.
    ambitions : str
        The ambitions of the agent.
    personality_MBTI : str
        The MBTI personality type of the agent.
    star_sign : str
        The star sign of the agent.
    income : str
        The income of the agent.
    favorite_pnw_hiking_trail : str
        The favorite Pacific Northwest hiking trail of the agent.
    hobbies : str
        The hobbies of the agent.
    pronouns : str
        The pronouns of the agent.
    location : str
        The current location of the agent in the simulated environment.
    memories : list
        A list of memories the agent has about their interactions.
    compressed_memories : list
        A list of compressed memories that summarize the agent's experiences.

    Methods:
    --------
    
    update_memories(other_agents, global_time, action_results):
        Updates the agent's memories based on their interactions with other agents.
    
    compress_memories(memory_ratings, global_time, MEMORY_LIMIT=10):
        Compresses the agent's memories to a more manageable and relevant set.

    converse(conversation_context, prompt_meta):
        Converse with another agent given the conversation context so far.
    """
     
    def __init__(self, name, description, world_graph):
        self.name = name
        self.profession = description["profession"]
        self.personality = description["personality"]
        self.ambitions = description["ambitions"]
        self.personality_MBTI = description["personality_MBTI"]
        self.star_sign = description["star_sign"]
        self.income = description["income"]
        self.favorite_pnw_hiking_trail = description["favorite_pnw_hiking_trail"]
        self.hobbies = description["hobbies"]
        self.pronouns = description["pronouns"]
        self.location = description["starting_location"]
        self.identity_prompt = ""
        self.memory_ratings = []
        self.memories = []
        self.compressed_memories = []
        self.world_graph = description["world_graph"]

    def __repr__(self):
        return f"Agent({self.name}, {self.location})"
    
    def initialize_identity(self, prompt_meta):
        self.identity_prompt = f'''You are {self.name} ({self.pronouns}). 
        You are a {self.profession}. 
        You are {self.personality}. Your MBTI is {self.personality_MBTI}.
        You ambitions are to {self.ambitions}. 
        You star sign is {self.star_sign}. 
        You make {self.income} income. 
        You like to {self.hobbies}. 
        Your favorite Pacific Northwest hiking trail is {self.favorite_pnw_hiking_trail}.'''

    def converse(self, conversation_context, prompt_meta):
        """Converse with another agent given the conversation context so far.
        
        Parameters:
        -----------
        conversation_context : str
            The context of the conversation.
        prompt_meta : str
            The prompt used to generate the conversation.
        
        Returns:
        --------
        utterance : str
            The utterance generated by the agent.
        """
        return NotImplementedError
    
    def update_memories(self, other_agents, global_time, action_results):
        
        """
        Updates the agent's memories based on their interactions with other agents.
        
        Parameters:
        -----------
        other_agents : list
            A list of other Agent objects in the simulation.
        global_time : int
            The current time in the simulation.
        action_results : dict
            A dictionary of the results of each agent's action.
        """
        for agent in other_agents:
            if agent.location == self.location:
                self.memories.append('[Time: {}. Person: {}. Memory: {}]\n'.format(str(global_time), agent.name, action_results[agent.name]))

    def compress_memories(self, global_time, MEMORY_LIMIT=10):

        """
        Compresses the agent's memories to a more manageable and relevant set.
        
        Parameters:
        -----------
        global_time : int
            The current time in the simulation.
        MEMORY_LIMIT : int, optional
            The maximum number of memories to compress. Default is 10.

        Returns:
        --------
        memory_string : str
            The compressed memory string.
        """

        memories_sorted = sorted(self.memory_ratings, key=lambda x: x[1], reverse=True)
        relevant_memories = memories_sorted[:MEMORY_LIMIT]
        memory_string_to_compress = '.'.join([a[0] for a in relevant_memories])
        return '[Recollection at Time {}:00: {}]'.format(str(global_time), memory_string_to_compress)
    
    def rate_memories(self, locations, global_time, prompt_meta):

        """
         Rates the agent's memories based on their relevance and importance.
        
        Parameters:
        -----------
        locations : Locations
            The Locations object representing different areas in the simulated environment.
        global_time : int
            The current time in the simulation.
        prompt_meta : str
            The prompt used to rate the memories.

        Returns:
        --------
        memory_ratings : list
            A list of tuples representing the memory, its rating, and the generated response.
        """

        memory_ratings = []
        for memory in self.memories:
            prompt = "You are {}. Your plans are: {}. You are currently in {}. It is currently {}:00. You observe the following: {}. Give a rating, between 1 and 5, to how much you care about this.".format(self.name, self.plans, locations.get_location(self.location), str(global_time), memory)
            res = generate(prompt_meta.format(prompt))
            rating = get_rating(res)
            max_attempts = 2
            current_attempt = 0
            while rating is None and current_attempt < max_attempts:
                rating = get_rating(res)
                current_attempt += 1
            if rating is None:
                rating = 0
            memory_ratings.append((memory, rating, res))
        self.memory_ratings = memory_ratings
        return memory_ratings
    
    def move(self, new_location_name):

        if new_location_name == self.location:
            return self.location

        try:
            path = nx.shortest_path(self.world_graph, source=self.location, target=new_location_name)
            self.location = new_location_name
        except nx.NetworkXNoPath:
            print(f"No path found between {self.location} and {new_location_name}")
            return self.location

        return self.location

